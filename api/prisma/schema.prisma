// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int            @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String
  password      String
  role          Role
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  members       Members?
  refresh_token RefreshToken[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Organizations {
  id         Int          @id @default(autoincrement())
  name       String
  type       String
  address    String
  phone      String
  email      String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  members    Members[]
  activities Activities[]

  @@map("organizations")
}

model Members {
  id              Int           @id @default(autoincrement())
  name            String
  type            String
  address         String
  phone           String
  email           String
  membership_date DateTime      @default(now())
  organizations   Organizations @relation(fields: [organizationId], references: [id])
  organizationId  Int           @unique
  users           Users         @relation(fields: [userId], references: [id])
  userId          Int           @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("members")
}

model Activities {
  id             Int            @id @default(autoincrement())
  title          String
  description    String
  date           DateTime
  organizations  Organizations? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("activities")
}

model RefreshToken {
  id           String   @id @unique @default(uuid())
  hashed_token String
  user_id      Int
  revoked      Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "refreshToken_userId_fkey")
  @@map("refresh_token")
}
